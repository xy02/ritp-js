//v0.2.0
syntax = "proto3";

package ritp;

//本端信息，两端在连接建立后首先必须相互发送一次此信息，本端在验证对端信息失败时，发送Frame.disconnect后关闭连接
message PeerInfo {
    string version = 1;
    bytes info = 2;
    string info_type = 3;
}

//数据帧，连接上的基础数据载体，在本端验证对端PeerInfo后发送
message Frame {
    oneof type {
        //表明本端不再接收Frame消息,并关闭连接
        Disconnect disconnect = 1;
        //表示本端可以接收更多的request、control或data的个数，等同于ReactiveStream里request(n)的意义
        uint32 pull = 2;
        //请求对端开始一条流，本端Requester生产数据，对端Handler消费数据
        Request request = 3;
        //流控制，由Handler发送
        Control control = 4;
        //流数据，由Requester发送
        Data data = 5;
        
        
        // //两端定时发送给对方，默认发送间隔20秒，等待40秒未收到对方ping时关闭连接
        // Ping ping = 2;
       
    }
}

//表明本端不再接收Frame消息,并关闭连接
message Disconnect {

}

/*
    一条流有以下生命周期：
    1. 一条流必须由本端Peer发送一个Frame.request开始并创建一个Requester来发送之后的流数据Frame.data。
    2. 接收端（Peer）收到request后创建一个Handler来处理request信息和之后对端Requester发来的数据流。
    3. Handler发送Control.close表示结束流并不再接收任何流消息，Requester必须在收到close后不再发送任何流消息。
    4. Requester必须在收到Handler发来的pull后才能发送Data.buf。
    5. Requester发送Data.end表示不再发送任何流消息并结束流。
*/

//请求对端开始一条流
message Request {
    //流ID
    uint64 stream_id = 1;
    //处理者路径，此路径应是一个可以在服务中心注册的服务方法
    string path = 2;
    //信息，可以包含生产者的信息、消费者需要的数据等
    bytes info = 3;
    //信息类型
    string info_type = 4;
    //Data.buf的类型
    string buf_type = 5;
}

//流控制，由Handler发送
message Control {
    //流ID
    uint64 stream_id = 1;
    oneof type {
        //表明Handler不再接收流数据
        Close close = 2;
        //表示Handler可以接收更多的Data.buf的个数，等同于ReactiveStream里request(n)的意义
        //生产者Requester发送的Data.buf总个数必须小于等于消费者Handler发送的Control.pull的累加总数
        uint32 pull = 3;
    }
}

//表明本端Handler不再接收数据
message Close {
    Reason reason = 1;
    string message = 2;

    enum Reason {
        APPLICATION_ERROR = 0;
        PROTOCOL_ERROR = 1;
    }
}

//流数据，由Requester发送
message Data {
    //流ID
    uint64 stream_id = 1;
    oneof type {
        //结束流
        End end = 2;
        //流数据，只有收到对端Handler发送的Control.pull后，本端才能发送有限个数的Data.buf
        bytes buf = 3;
    }
}

//结束流
message End {
    Reason reason = 1;
    string message = 2;

    enum Reason {
        //流成功结束
        COMPLETE = 0;
        CANCEL = 1;
    }
}

// //an data message in one stream
// message Data {
//      //流ID
//      uint64 stream_id = 1;
//      oneof type {
//         //设置流，表示开始一条流，本端Requester生产数据，对端Handler消费数据
//         Setup setup = 2;
//         //结束流，表示本端Requester不再产生数据
//         End end = 3;
//         //关闭流，表明本端Handler不再接收流数据
//         Close close = 4;
//         //表示本端Handler可以接收更多的buf的个数，等同于ReactiveStream里request(n)的意义
//         //生产者发送的buf与data总个数必须小于等于消费者发送的pull数值累加总数
//         uint32 pull = 5;
//         //流数据，只有收到对端Handler发送的pull后，本端Requester才能发送有限个数的buf
//         bytes buf = 6;

//         Data data = 7;
//      }
// }

// message Setup {
//     //处理者名称，此名称应是一个可以在服务中心注册的服务方法
//     string handler_name = 1;
//     //信息数据，可以包含生产者的信息、消费者需要的数据等
//     bytes info = 2;
//     string info_type = 3;
//     string buf_type = 4;
// }